using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsymspg"], :spglib),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/singularitti/SpgLibBuilder/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/SpgLibBuilder.v1.9.4.aarch64-linux-gnu.tar.gz", "9eb343763bebd426ad1b6da56dd4955df72a42fd6809cee16cf5338a517fb8fb"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/SpgLibBuilder.v1.9.4.aarch64-linux-musl.tar.gz", "47cc151d019d25b4a496d7837188a4c61483a7d332268c5f283427f1e023044b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/SpgLibBuilder.v1.9.4.arm-linux-gnueabihf.tar.gz", "0e7b7069ac64b58b05727ce2a1f18fb1a89820d7b78114ab1e181e3995188cfa"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/SpgLibBuilder.v1.9.4.arm-linux-musleabihf.tar.gz", "ffc12c0e4883974250c4ffb8d20523fe0ec72c07ce72faa441f7adce6de1a720"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SpgLibBuilder.v1.9.4.i686-linux-gnu.tar.gz", "9945a76b06d564e4cf262a2b07c21859f684764617493b92ba657ca675ce090d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/SpgLibBuilder.v1.9.4.i686-linux-musl.tar.gz", "cc5742a57b952b95ecc5a370a8de68e446df749f886e80ee725a7f399ae5f52f"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/SpgLibBuilder.v1.9.4.powerpc64le-linux-gnu.tar.gz", "9225258519b4557beb3ca18c6df3e5865a3767b7118dddcc4b55308d9bb4f426"),
    MacOS(:x86_64) => ("$bin_prefix/SpgLibBuilder.v1.9.4.x86_64-apple-darwin14.tar.gz", "c4293647be4a36b8a6d893ccc50d35e601012d26cd590e4a575c11b9c788729d"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SpgLibBuilder.v1.9.4.x86_64-linux-gnu.tar.gz", "eea10a3332e247de730c28c8f0fcb3e896e344b2f0f8c3ca28a6e6f9c7c472e4"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/SpgLibBuilder.v1.9.4.x86_64-linux-musl.tar.gz", "8f7b5f8c29014df20e7bdfd7d6a703702d2dca95b2b7761e77e716d7f33a9ecd"),
    FreeBSD(:x86_64) => ("$bin_prefix/SpgLibBuilder.v1.9.4.x86_64-unknown-freebsd11.1.tar.gz", "8b17c6e1be8c729ddb898129662f4d473599ba4567125ec7d1d032a4b2d21cad"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
